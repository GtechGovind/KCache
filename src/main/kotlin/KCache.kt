package com.gtech.client

/**
 * A Cache interface that allows storing and retrieving key-value pairs.
 * Supports both synchronous and asynchronous operations, along with automatic cleanup, debugging, and custom configurations.
 */
interface KCache<K, V> {

    /**
     * Synchronously adds a key-value pair to the cache.
     *
     * @param key The key to store in the cache.
     * @param value The value to store corresponding to the key.
     */
    fun put(key: K, value: V)

    /**
     * Asynchronously adds a key-value pair to the cache.
     * This is useful for non-blocking operations when adding to the cache.
     *
     * @param key The key to store in the cache.
     * @param value The value to store corresponding to the key.
     */
    suspend fun putAsync(key: K, value: V)

    /**
     * Synchronously retrieves the value associated with the specified key.
     *
     * @param key The key for which to retrieve the associated value.
     * @return The value corresponding to the key, or `null` if not found.
     */
    fun get(key: K): V?

    /**
     * Asynchronously retrieves the value associated with the specified key.
     * This function is ideal for non-blocking calls, especially when interacting with remote sources.
     *
     * @param key The key for which to retrieve the associated value.
     * @return A `suspend` function that returns the value corresponding to the key, or `null` if not found.
     */
    suspend fun getAsync(key: K): V?

    /**
     * Removes the entry associated with the specified key from the cache.
     *
     * @param key The key to be removed.
     */
    fun remove(key: K)

    /**
     * Clears all entries in the cache.
     * This function removes all key-value pairs from the cache.
     */
    fun clear()

    /**
     * Provides a mechanism for debugging the cache state.
     * This can be useful for tracking cache hits, misses, and evictions during development.
     */
    fun debugCacheUsage()

    /**
     * Allows custom cache handling with an inline callback function.
     * The cache will first check if the key exists, and if not, it will execute the callback and cache the result.
     *
     * @param key The key to check in the cache.
     * @param callback The callback to execute if the key does not exist in the cache.
     * @return The value retrieved either from the cache or generated by the callback.
     */
    fun withCache(key: K, callback: () -> V?): V?

    /**
     * An asynchronous variant of the `withCache` function.
     * It checks if the key is present and retrieves the value asynchronously or generates the value using the callback.
     *
     * @param key The key to check in the cache.
     * @param callback The suspendable callback to generate the value if it does not exist.
     * @return The value retrieved either from the cache or generated asynchronously by the callback.
     */
    suspend fun withCacheAsync(key: K, callback: suspend () -> V?): V?

    /**
     * Stops any ongoing cache cleanup tasks.
     * Useful for manually managing cleanup intervals, or when cache cleanup is no longer necessary.
     */
    fun stopCleanup()

    /**
     * Builder class for configuring and creating an instance of KCache.
     * Provides a flexible and readable way to set parameters for the cache.
     */
    class Builder<K, V> {
        private var ttlMillis: Long = 60000L // Default TTL of 1 minute
        private var maxSize: Int = 100 // Default max size of 100 entries
        private var cleanupIntervalMillis: Long = 10000L // Default cleanup interval of 10 seconds
        private var enableAutoCleanup: Boolean = true // Enable automatic cleanup by default
        private var logger: ((String) -> Unit)? = null // Optional logger callback
        private var evictionCallback: ((K, V) -> Unit)? = null // Optional eviction callback

        /**
         * Sets the time-to-live (TTL) for cache entries.
         *
         * @param ttl Time-to-live in milliseconds.
         * @return The Builder instance for method chaining.
         */
        fun setTTL(ttl: Long) = apply { this.ttlMillis = ttl }

        /**
         * Sets the maximum size of the cache.
         *
         * @param size Maximum number of entries the cache can hold.
         * @return The Builder instance for method chaining.
         */
        fun setMaxSize(size: Int) = apply { this.maxSize = size }

        /**
         * Sets the cleanup interval for periodic cleanup of expired cache entries.
         *
         * @param interval Cleanup interval in milliseconds.
         * @return The Builder instance for method chaining.
         */
        fun setCleanupInterval(interval: Long) = apply { this.cleanupIntervalMillis = interval }

        /**
         * Enables or disables automatic cleanup.
         *
         * @param enabled True to enable, false to disable automatic cleanup.
         * @return The Builder instance for method chaining.
         */
        fun setAutoCleanup(enabled: Boolean) = apply { this.enableAutoCleanup = enabled }

        /**
         * Sets a custom logger callback for logging cache operations.
         *
         * @param logger A callback function for logging.
         * @return The Builder instance for method chaining.
         */
        fun setLogger(logger: ((String) -> Unit)?) = apply { this.logger = logger }

        /**
         * Sets a custom eviction callback for handling evictions.
         *
         * @param callback A callback invoked on eviction.
         * @return The Builder instance for method chaining.
         */
        fun setEvictionCallback(callback: ((K, V) -> Unit)?) = apply { this.evictionCallback = callback }

        /**
         * Builds and returns a configured instance of KCache.
         *
         * @return An instance of KCache.
         */
        fun buildInMemoryCache(): KCache<K, V> {
            return InMemoryCache(
                ttlMillis = ttlMillis,
                maxSize = maxSize,
                cleanupIntervalMillis = cleanupIntervalMillis,
                enableAutoCleanup = enableAutoCleanup,
                logger = logger,
                evictionCallback = evictionCallback
            )
        }
    }
}
